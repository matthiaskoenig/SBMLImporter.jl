var documenterSearchIndex = {"docs":
[{"location":"Support/#support","page":"Supported SBML featuers","title":"Supported SBML Features","text":"","category":"section"},{"location":"Support/","page":"Supported SBML featuers","title":"Supported SBML featuers","text":"SBMLImporter supports many SBML features for models of level 2 or higher. Currently, excluding FBA models it successfully passes 1257 out of 1785 test cases. The failed test cases cover features currently not supported. Key features supported include:","category":"page"},{"location":"Support/","page":"Supported SBML featuers","title":"Supported SBML featuers","text":"Events\nRate rules\nAssignment rules\nAlgebraic rules\nDynamic compartment size\nSpecies and model conversion factors","category":"page"},{"location":"Support/","page":"Supported SBML featuers","title":"Supported SBML featuers","text":"Species can be specified in either concentration or amount. The unit determination is:","category":"page"},{"location":"Support/","page":"Supported SBML featuers","title":"Supported SBML featuers","text":"If initialConcentration is set for a species, its unit will be set to concentration.\nIf initialAmount is set for a species, it will be treated as being in amount.\nIf neither is set, and the substanceUnits of the species is \"substance,\" it is treated as being in amounts.","category":"page"},{"location":"Support/","page":"Supported SBML featuers","title":"Supported SBML featuers","text":"Currently SBMLImporter does not support the following:","category":"page"},{"location":"Support/","page":"Supported SBML featuers","title":"Supported SBML featuers","text":"Models with empty SBML reactions\nDelay (creating a delay-differential-equations)\nEvents with delay\nEvents with priority\nHierarchical models\nFast reactions\nParameter or species names corresponding to Julia constants (pi, Inf, NaN, true, false)\nCertain uncommon math expressions, such as lt with three arguments, implies etc...","category":"page"},{"location":"Support/","page":"Supported SBML featuers","title":"Supported SBML featuers","text":"Import might also fail for complicated nested piecewise expressions inside SBML functions.","category":"page"},{"location":"Support/#Support-for-additional-features","page":"Supported SBML featuers","title":"Support for additional features","text":"","category":"section"},{"location":"Support/","page":"Supported SBML featuers","title":"Supported SBML featuers","text":"If SBMLImporter lacks support for a feature you would like to have, please file an issue on GitHub.","category":"page"},{"location":"#SBMLImporter.jl","page":"Home","title":"SBMLImporter.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This is the documentation for SBMLImporter.jl, a Julia importer for dynamic models specified in the Systems Biology Markup Language (SBML). This importer supports many SBML features such as events, dynamic compartments size, rate-, assignment-, and algebraic-rules. For a list of supported features, see here. For a list of differences compared to SBMLToolkit.jl, see the README.","category":"page"},{"location":"","page":"Home","title":"Home","text":"To perform parameter estimation for a SBML model, see PEtab.jl.","category":"page"},{"location":"#Tutorial","page":"Home","title":"Tutorial","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"SBMLImporter is a tool for importing SBML models into a ModelingToolkit.jl ODESystem or a Catalyst ReactionSystem. This offers several benefits, such as symbolic model pre-processing for efficient simulations. An ODESystem can easily be converted into an ODEProblem and solved using any ODE solver in OrdinaryDiffEq.jl, while a ReactionSystem can for example easily be converted into an ODESystem or SDESystem. If the model includes events, callbacks are generated during the import.","category":"page"},{"location":"","page":"Home","title":"Home","text":"note: Note\nThe number of arguments returned by SBML_to_ReactionSystem and SBML_to_ODESystem varies depending on whether the model has events. When importing an SBML model, the import function will inform about the number of returned arguments.","category":"page"},{"location":"#Importing-a-Model-Without-Events-and-Without-Piecewise-Expressions","page":"Home","title":"Importing a Model Without Events and Without Piecewise Expressions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Importing an SBML model is straightforward. Given the path to a SBML file to import into a ReactionSystem do:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using SBMLImporter\nrn, specie_map, parameter_map = SBML_to_ReactionSystem(path_SBML)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Here, rn is the ReactionSystem that for example can be converted into an ODESystem or a SDESystem, specie_map is a mapping for the initial values, and parameter_map is a mapping/values for the model parameters. To simulate the model with an ODE-solver, construct an ODEProblem and solve it using any ODE solver from OrdinaryDiffeq:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using OrdinaryDiffEq\nsys = convert(ODESystem, rn)\ntspan = (0, 10.0)\nprob = ODEProblem(sys, specie_map, tspan, parameter_map, jac=true)\nsol = solve(prob, Rodas5P())","category":"page"},{"location":"","page":"Home","title":"Home","text":"Setting jac=true mean that the Jacobian of the ODE is computed symbolically, which is recommended for performance. To get the order of the species and parameters in the model do:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using ModelingToolkit\nstates(sys) # species\nparameters(sys)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Alternatively, the model can be imported directly into an ODESystem with:","category":"page"},{"location":"","page":"Home","title":"Home","text":"sys, specie_map, parameter_map = SBML_to_ODESystem(path_SBML)","category":"page"},{"location":"","page":"Home","title":"Home","text":"From this point the documentation focuses on ODE-models, but any model that can be imported as an ODESystem can also be imported as a ReactionSystem.","category":"page"},{"location":"#Importing-a-Model-with-Events","page":"Home","title":"Importing a Model with Events","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"When importing a SBML model with events, the events are rewritten to callbacks. There are two types of callbacks, ContinuousCallback and DiscreteCallback. The former use root-finding to identify when the event is triggered, while a DiscreteCallback solves the ODE up to the event time, applies the event, and then proceeds. Since root-finding can be computationally demanding, SBMLImporter rewrites a SBML events into a DiscreteCallback when possible. To keep track of the discrete event times, the importer also returns a function for computing event times given the model parameters:","category":"page"},{"location":"","page":"Home","title":"Home","text":"sys, specie_map, parameter_map, cb, get_tstops = SBML_to_ODESystem(path_SBML)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Here, cb represent the model's events, and get_tstops is a function to compute the event times. To simulate the model, do:","category":"page"},{"location":"","page":"Home","title":"Home","text":"tspan = (0, 10.0)\nprob = ODEProblem(sys, specie_map, tspan, parameter_map, jac=true)\n# Compute event times\ntstops = get_tstops(prob.u0, prob.p)\nsol = solve(prob, Rodas5P(), tstops=tstops, callback=callbacks)","category":"page"},{"location":"#Importing-a-Model-with-Time-Dependent-Piecewise-Expressions","page":"Home","title":"Importing a Model with Time-Dependent Piecewise Expressions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"In SBML Piecewise expressions correspond to the Julia ifelse function:","category":"page"},{"location":"","page":"Home","title":"Home","text":"ifelse(cond, value_true, value_false)","category":"page"},{"location":"","page":"Home","title":"Home","text":"If cond==true, the statement evaluates to value_true. While ifelse statements can be directly encoded in the model, this may decrease performance as a discontinuity is added. Therefore, SBMLImporter attempts to rewrite ifelse to callbacks (events). Additionally, as ifelse can sometimes be active at time t0, SBMLImporter provides a function to adjust ifelse rewritten callbacks at time zero:","category":"page"},{"location":"","page":"Home","title":"Home","text":"sys, specie_map, parameter_map, cb, get_tstops, ifelse_t0 = SBML_to_ODESystem(path_SBML)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Here, ifelse_t0 is a vector of functions handling piecewise (ifelse) conditions rewritten to events which are active at time zero. To solve the model do:","category":"page"},{"location":"","page":"Home","title":"Home","text":"tspan = (0, 10.0)\nprob = ODEProblem(sys, specie_map, tspan, parameter_map, jac=true)\ntstops = get_tstops(prob.p, prob.u0)\n# Adjust ifelse statements active at time zero\nfor _f! in ifelse_t0\n    _f!(prob.u0, prob.p)\nend\nsol = solve(prob, Rodas5P(), tstops=tstops, callback=cb)","category":"page"},{"location":"","page":"Home","title":"Home","text":"To not rewrite ifelse to events when creating the ODESystem, set ifelse_to_callback=false when calling SBML_to_ODESystem.","category":"page"},{"location":"#Citation","page":"Home","title":"Citation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"We will soon publish a paper you can cite if you found SBMLImporter.jl helpful in your work.","category":"page"},{"location":"API_choosen/#API","page":"API","title":"API","text":"","category":"section"},{"location":"API_choosen/","page":"API","title":"API","text":"SBML_to_ReactionSystem\nSBML_to_ODESystem","category":"page"},{"location":"API_choosen/#SBMLImporter.SBML_to_ReactionSystem","page":"API","title":"SBMLImporter.SBML_to_ReactionSystem","text":"SBML_to_ReactionSystem(path_SBML::AbstractString;\n                       ifelse_to_callback::Bool=true,\n                       inline_assignment_rules::Bool=false,\n                       write_to_file::Bool=false, \n                       verbose::Bool=true, \n                       return_all::Bool=false, \n                       model_as_string::Bool=false)\n\nParse an SBML model into a Catalyst ReactionSystem and potentially convert events/piecewise to callbacks.\n\nFor information on simulating the ReactionSystem, refer to the documentation.\n\nFor converting the SBML model directly into a ModelingToolkit ODESystem see the function SBML_to_ODESystem.\n\nFor testing path_SBML can be the model as a string if model_as_string=true.\n\nnote: Note\nThe number of returned arguments depends on whether the SBML model has events and/or piecewise expressions (see below).\n\nArguments\n\npath_SBML: File path to a valid SBML file (level 2 or higher).\nifelse_to_callback=true: Whether to rewrite ifelse (piecewise) expressions to callbacks; recommended for performance.\ninline_assignment_rules=true: Whether to inline assignment rules into model equations. Recomended for model import speed,    however, note that it will not be possible to access the rule-variable then via sol[:var]\nwrite_to_file=false: Whether to write the parsed SBML model to a Julia file in the same directory as the SBML file.\nverbose=true: Whether or not to display information on the number of return arguments.\nreturn_all=true: Whether or not to return all possible arguments (see below), regardless of whether the model has events.\nmodel_as_string=false : Whether or not the model (path_SBML) is provided as a string, for testing.\n\nReturns\n\nrn: A Catalyst ReactionSystem that for example can be converted into an ODEProblem and solved.\nspecie_map: A species map setting initial values; together with the ReactionSystem, it can be converted into an ODEProblem.\nparameter_map A parameter map setting parameter values; together with the ReactionSystem, it can be converted into an ODEProblem.\ncbset - only for models with events/piecewise expressions: Callbackset (events) for the model.\nget_tstops- Only for models with events/piecewise expressions: Function computing time stops for discrete callbacks in the cbset.\n\nExamples\n\n# Import and simulate model without events\nusing SBMLImporter\nrn, specie_map, parameter_map = SBML_to_ReactionSystem(path_SBML)\nsys = convert(ODESystem, rn)\n\nusing OrdinaryDiffEq\ntspan = (0, 10.0)\nprob = ODEProblem(sys, specie_map, tspan, parameter_map, jac=true)\n# Solve ODE with Rodas5P solver\nsol = solve(prob, Rodas5P())\n\n# Import a model with events\nusing SBMLImporter\nrn, specie_map, parameter_map, cb, get_tstops = SBML_to_ReactionSystem(path_SBML)\nsys = convert(ODESystem, rn)\n\nusing OrdinaryDiffEq\ntspan = (0, 10.0)\nprob = ODEProblem(sys, specie_map, tspan, parameter_map, jac=true)\n# Compute event times\ntstops = get_tstops(prob.u0, prob.p)\nsol = solve(prob, Rodas5P(), tstops=tstops, callback=callbacks)\n\n\n\n\n\n","category":"function"},{"location":"API_choosen/#SBMLImporter.SBML_to_ODESystem","page":"API","title":"SBMLImporter.SBML_to_ODESystem","text":"SBML_to_ODESystem(path_SBML::AbstractString;\n                  ifelse_to_callback::Bool=true,\n                  inline_assignment_rules::Bool=false,\n                  write_to_file::Bool=false,\n                  verbose::Bool=true,\n                  return_all::Bool=false,\n                  model_as_string::Bool=false)\n\nParse an SBML model into a ModelingToolkit ODESystem and potentially convert events/piecewise to callbacks.\n\nBy default, structurally_simplified is called on the ODESystem before it is returned.\n\nFor information on simulating the ODESystem, refer to the documentation.\n\nFor testing path_SBML can be the model as a string if model_as_string=true\n\nnote: Note\nThe number of returned arguments depends on whether the SBML model has events and/or piecewise expressions (see below).\n\nArguments\n\npath_SBML: File path to a valid SBML file (level 2 or higher).\nifelse_to_callback=true: Whether to rewrite ifelse (piecewise) expressions to callbacks; recommended for performance.\ninline_assignment_rules=true: Whether to inline assignment rules into model equations. Recomended for model import speed,    however, note that it will not be possible to access the rule-variable then via sol[:var]\nwrite_to_file=false: Whether to write the parsed SBML model to a Julia file in the same directory as the SBML file.\nverbose=true: Whether or not to display information on the number of return arguments.\nreturn_all=true: Whether or not to return all possible arguments (see below), regardless of whether the model has events.\nmodel_as_string=false : Whether or not the model (path_SBML) is provided as str, mainly for testing.\n\nReturns\n\node_system: A ModelingToolkit ODESystem that can be converted into an ODEProblem and solved.\nspecie_map: A species map setting initial values; together with the ODESystem, it can be converted into an ODEProblem.\nparameter_map A parameter map setting parameter values; together with the ODESystem, it can be converted into an ODEProblem.\ncbset - only for models with events/piecewise expressions: Callbackset (events) for the model.\nget_tstops- Only for models with events/piecewise expressions: Function computing time stops for discrete callbacks in the cbset.\n\nExamples\n\n# Import and simulate model without events\nusing SBMLImporter\nsys, specie_map, parameter_map = SBML_to_ODESystem(path_SBML)\n\nusing OrdinaryDiffEq\ntspan = (0, 10.0)\nprob = ODEProblem(sys, specie_map, tspan, parameter_map, jac=true)\n# Solve ODE with Rodas5P solver\nsol = solve(prob, Rodas5P())\n\n# Import a model with events\nusing SBMLImporter\nsys, specie_map, parameter_map, cb, get_tstops = SBML_to_ODESystem(path_SBML)\n\nusing OrdinaryDiffEq\ntspan = (0, 10.0)\nprob = ODEProblem(sys, specie_map, tspan, parameter_map, jac=true)\n# Compute event times\ntstops = get_tstops(prob.u0, prob.p)\nsol = solve(prob, Rodas5P(), tstops=tstops, callback=callbacks)\n\n\n\n\n\n","category":"function"}]
}
